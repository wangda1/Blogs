Python 中字符串解析:

	小贴士:	字符串前加上 r 是禁止字符转义的，例如：print("abc\\n"),abc\n;print(r"abc\n"),abc\n;
	

	1.解析函数:
		split():字符串分割函数，返回一个list；
		参数为split(sep,maxsplit),sep为分割参数字符串，空白时默认为空格（几个空格与一个空格的情况相同),参数可以为" “;
		maxsplit为最大分割次数，当为负数时，表示全分割；当为0时表示，表示不分割；当为正数时，表示分割次数；

		replace():字符替代函数，返回一个字符串;
		replace(old,new,[count]),此处count为可选可不选参数，表示替换次数（当字符串内有多个需要替换时）；负数为全替换；0为不替换；正数为替换次数；


		strip():行首与行尾的字符串删除函数，返回一个字符串；
		strip([chars]):注意：它只删除行首与行尾的情况，在中间位置时并不删除；
	

	2.正则表达式:Python的re模块提供了很多方法;
		
		1.r'\n\tabc'与'\n\tabc'的区别：当加上r时代表字符串里都是纯字符，并没有什么表空白的字符；当不加上时，则包含空白字符；

		2.匹配空白字符:\s,匹配任何非空白字符:\S;
		  匹配数字:\d,匹配任何非数字:\D;
		  匹配单词字符:\w,匹配任何非单词字符:\W;
		  +匹配1次或多次，.匹配除"\n"的任意字符;
		  ()可以对模式字符串进行分组;

		3.一些使用方法:引入re模块
		  match,search,findall

		  re.match():参数1:匹配的模式字符串；参数2:匹配的字符串；且该方法从字符串开始处进行匹配，仅在于开始处；
		  匹配成功，返回match对象，有start()与end()两种方法；

		  re.search():参数与match()相同，从整个字符串进行匹配；
		  当用()加入模式字符串后，可用group(),groups()查看匹配后的队象；

		  re.findall():参数一样,全局匹配;
		  返回一个list

		  re.compile():可以将正则表达式编译成一个模式对象;
		  方法findall('字符串')可以进行匹配;
			
		  re.split()：可以在第一个参数使用正则表达式进行匹配;
		

		3.BeautifulSoup
		  可以对结构化文档进行搜索,返回一个BeautifulSoup对象，
		  使用举例：
		  soup = BeautifulSoup("字符串") 或者一个文件句柄 open("abc.html")

		  该对象所常用的方法有:

			find_all('标签'),返回一个标签tag;

			find_all(元素名称,attrs = {属性名:属性值});


		常见的有几种匹配方式:

			1.直接把标签里面的属性以字典的方式写如attrs = {}中;


			2.利用正则表达式，将标签属性内容re.compile()成为一个模式串对象，减少较多属性时匹配的繁琐;

			

			3.用tag.text进行内容检查与匹配，再将符合匹配的内容进行输出与保留；
















			prettify():以结构的形式展现出来;

			


		tag标签的属性有:
			tag.name:可以获取标签名字；
			
			Attributes:
			tag['id'];tag['class'];等操作方式与字典相同;

			方法有:

					
			get_text():获取本标签的文字内容;
			
	





























		  
